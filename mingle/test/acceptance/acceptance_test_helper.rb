#  Copyright 2020 ThoughtWorks, Inc.
#  
#  This program is free software: you can redistribute it and/or modify
#  it under the terms of the GNU Affero General Public License as
#  published by the Free Software Foundation, either version 3 of the
#  License, or (at your option) any later version.
#  
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU Affero General Public License for more details.
#  
#  You should have received a copy of the GNU Affero General Public License
#  along with this program.  If not, see <https://www.gnu.org/licenses/agpl-3.0.txt>.

require File.expand_path(File.dirname(__FILE__) + '/../test_helper')
require File.expand_path(File.dirname(__FILE__) + '/selenium_test_helper')
require File.expand_path(File.dirname(__FILE__) + '/../messaging/messaging_test_helper')
require File.expand_path(File.dirname(__FILE__) + '/mingle_helpers')


require File.expand_path(File.dirname(__FILE__) + '/permissions_dropdown')
require 'test/unit/assertions'

RUBY_PLATFORM =~ /java/ ? java.lang.System.set_property('MINGLE', 'acceptance_test') : ENV['MINGLE'] = 'acceptance_test'

MingleConfiguration.search_namespace = 'true'
MingleConfiguration.search_index_name = 'ac-mingle'
MingleSprocketsConfig.build

class ActiveSupport::TestCase
  include MessagingTestHelper
  include CSSLocatorHelper
  # Transactional fixtures accelerate your tests by wrapping each test method
  # in a transaction that's rolled back on completion.  This ensures that the
  # test database remains unchanged so your fixtures don't have to be reloaded
  # between every test method.  Fewer database queries means faster tests.
  #
  # Read Mike Clark's excellent walkthrough at
  #   http://clarkware.com/cgi/blosxom/2005/10/24#Rails10FastTesting
  #
  # Every Active Record database supports transactions except MyISAM tables
  # in MySQL.  Turn off transactional fixtures in this case; however, if you
  # don't care one way or the other, switching from MyISAM to InnoDB tables
  # is recommended.
  self.use_transactional_fixtures = false

  # for some weird reason the css=xxx style locator do not work on current selenium
  # this provide an alternative way. pay attention to escape single quote.
  # attention: on IE, the element that generated by javascript do not works with $$, try use class_locator instead

  class << self
    def does_not_work_on_windows
      if Config::CONFIG['host_os'] =~ /mswin32/i || Config::CONFIG['host_os'] =~ /Windows/i
        class_eval do
          def run(*args)
            putc 'S'
            at_exit { puts "WARNING: #{name} does not work on windows, skipped..." }
          end
        end
      end
    end

    def does_not_work_on_ie
      if selenium_browser =~ /iexplore/
        class_eval do
          def run(*args)
            putc 'S'
            at_exit { puts "WARNING: #{name} does not work on IE due to selenium browser compatibility isssue, skipped..." }
          end
        end
      end
    end

    def does_not_work_on_google_chrome
      if selenium_browser == "*googlechrome"
        class_eval do
          def run(*args)
            putc 'S'
            at_exit { puts "WARNING: #{name} does not work on Chrome due to selenium browser compatibility isssue, skipped..." }
          end
        end
      end
    end
  end

  def with_toggle(name, value, &block)
    original_value = MingleConfiguration.send(name.to_sym)
    MingleConfiguration.send(:"#{name}=", value)
    @browser.open("/_eval?scriptlet=#{CGI.escape("MingleConfiguration.#{name}='#{value}'")}")

    block.call if block_given?
  ensure
    MingleConfiguration.send(:"#{name}=", original_value)
    @browser.open("/_eval?scriptlet=#{CGI.escape("MingleConfiguration.#{name}='#{original_value}'")}")
  end

  def enable_multitenant_messaging
    MingleConfiguration.multitenant_messaging = 'true'
    @browser.open("/_eval?scriptlet=#{CGI.escape("MingleConfiguration.multitenant_messaging='true'")}")
  end

  def disable_multitenant_messaging
    MingleConfiguration.multitenant_messaging = 'false'
    @browser.open("/_eval?scriptlet=#{CGI.escape("MingleConfiguration.multitenant_messaging='false'")}")
  end

  def using_ie?
    ActiveSupport::TestCase.selenium_browser =~ /iexplore/
  end

  def using_google_chrome?
    ActiveSupport::TestCase.selenium_browser == "*googlechrome"
  end

  def using_firefox?
    ActiveSupport::TestCase.selenium_browser == "*firefox"
  end

  def does_not_work_on_ie
    if self.class.selenium_browser !~ /iexplore/
      yield
    else
      putc 'S'
      at_exit { puts "WARNING: #{name} does not work on ie dur to selenium browser compatibility isssue, skipped..." }
    end
  end

  def pending?
      putc 'S'
      at_exit { puts "#{name} is a Pending test ... " }
      return false
  end


  def does_not_work_google_chrome
    if self.class.selenium_browser != "*googlechrome"
      yield
    else
      putc 'S'
      at_exit { puts "WARNING: #{name} does not work on google chrome dur to selenium browser compatibility isssue, skipped..." }
    end
  end

  def assert_color_equal(expected_color, actual_color)
    assert_equal normalize_color(expected_color), normalize_color(actual_color)
  end

  def with_page_size(number, &block)
    @browser.open("/_class_method_call?class=ConstantResetter&method=set_constant&name=PAGINATION_PER_PAGE_SIZE&value=#{number}")
    assert_text_present "SUCCESS"
    yield
  ensure
    @browser.open("/_class_method_call?class=ConstantResetter&method=reset_constant&name=PAGINATION_PER_PAGE_SIZE")
  end

  def with_grid_cards_size_limit(number, &block)
    @browser.open("/_class_method_call?class=ConstantResetter&method=set_constant&name=CardViewLimits::MAX_GRID_VIEW_SIZE&value=#{number}")
    assert_text_present "SUCCESS"
    yield
  ensure
    @browser.open("/_class_method_call?class=ConstantResetter&method=reset_constant&name=CardViewLimits::MAX_GRID_VIEW_SIZE")
  end

  def last_email
    return unless File.exists?(File.join(Rails.root, '/tmp/mails/last'))
    raw_email = File.read(File.join(Rails.root, '/tmp/mails/last'))
    TMail::Mail.parse(raw_email)
  end

  def reload_current_page
    @browser.refresh
    @browser.wait_for_page_to_load
  end


  def Outline(example_table, options={}, &block)
    parse_table(example_table).each_with_index do |row_data, row_index|
      if self.respond_to?(:setup)
        begin
          setup if !options[:skip_setup]
        rescue
          error_happen_on_data_row(row_data, row_index)
          raise
        end
      end

      begin
        yield(*row_data)
      rescue
        error_happen_on_data_row(row_data, row_index)
        raise
      ensure
        self.teardown if !options[:skip_setup]
      end
    end
  end

   def on_after(&block)
     @on_after ||= []
     @on_after << block
   end

   def context
     @context ||= {}
   end

   def teardown
     (@on_after || []).each do |callback|
       callback.call
     end
     @on_after = []
     @context = {}
   end

  private
   def parse_table(table_str)
     ret = []
     table_str.each_line do |line|
       next if line =~ /^\s*#/ #skip comment
       ret << convert_procs!(line.split('|').reject(&:blank?).collect(&:strip))
     end
     ret.reject(&:empty?)
   end

   def error_happen_on_data_row(row, index)
     output = ["*" * 88]
     output << "* Error happened for Outline #{self.name}"
     output << "* On Example Row #{index + 1}: | #{row.join(' | ')} |"
     output << ["*" * 88]
     puts output
   end

   def convert_procs!(data)
     data.each_with_index do |liter, index|
       data[index] = Operation.new(self, $1) if liter =~ /^\{(.*)\}$/
     end
   end



  private
  def normalize_color(color_string)
    case
      when color_string =~ /^#(.{2})(.{2})(.{2})$/
        [$1.hex, $2.hex, $3.hex]
      when color_string =~ /^rgb\((\d+),\s*(\d+),\s*(\d+)\)$/
        [$1.to_i, $2.to_i, $3.to_i]
    end
  end
end


class HtmlTextMatcher
  include Test::Unit::Assertions

  def initialize(expect_text)
    @expect_text = expect_text
  end

  def assert_match(real_html)
    assert_equal strip_spaces(strip_tags(@expect_text)), strip_spaces(strip_tags(real_html))
  end

  private

  def strip_tags(text)
    text.gsub(/<.*>/, '').gsub(/<.*\/\s*>/, '').gsub(/<\s*\/.*>/, '')
  end

  def strip_spaces(text)
    text.gsub(/[\s]/, '')
  end
end

def match_html_text(expect_text)
  HtmlTextMatcher.new(expect_text)
end


class Operation
  def initialize(host, liter)
    @host = host
    @liter = liter.strip
  end

  def apply
    @host.instance_eval(@liter)
  end

  def to_s
    "{#{@liter}}"
  end

  alias :happened :apply
end

# clear ar project cache in test
class ActiveRecord::Base
  before_save :clear_project_cache

  def clear_project_cache
    return true if self.is_a?(AsynchRequest)
    return true unless Project.activated? && respond_to?(:project) && project.respond_to?(:identifier)
    ProjectCacheFacade.instance.clear_cache(project.identifier)
    true
  end
end

# Temp. Should remove after no more card import/export random build failures.
module UserAwareProcessorLogging
end

module UserAwareProcessorLogging
  def process_with_logging(message, processor)
    Messaging.logger.error "\nAbout to process a message in #{processor.class::QUEUE}. It is #{message.inspect}.\n"
    result = process_without_logging(message, processor)
    Messaging.logger.error "\nFinished processing message #{message.inspect} from #{processor.class::QUEUE}\n"
    result
  end
end
class << Messaging::UserAwareProcessor
  include UserAwareProcessorLogging
  alias_method_chain :process, :logging
end
