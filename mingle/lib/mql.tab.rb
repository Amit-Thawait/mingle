# DO NOT MODIFY!!!!
# This file is automatically generated by racc 1.4.5
# from racc grammer file "lib/mql.grammar".

#  Copyright 2020 ThoughtWorks, Inc.
#  
#  This program is free software: you can redistribute it and/or modify
#  it under the terms of the GNU Affero General Public License as
#  published by the Free Software Foundation, either version 3 of the
#  License, or (at your option) any later version.
#  
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU Affero General Public License for more details.
#  
#  You should have received a copy of the GNU Affero General Public License
#  along with this program.  If not, see <https://www.gnu.org/licenses/agpl-3.0.txt>.


require 'racc/parser'


require 'strscan'
require 'ast'


module Mql

  class Parser < Racc::Parser

module_eval <<'..end lib/mql.grammar modeval..id6ca7f689f1', 'lib/mql.grammar', 127
include Ast

def unquote(value)
  case value
  when /^'(.*)'$/ then $1
  when /^"(.*)"$/ then $1
  else value
  end
end

def unescape_quote(value)
  value.gsub(/\\(['|"])/, '\1')
end

def parse(str)
  @input = str
  tokens = []
  str = "" if str.nil?
  scanner = StringScanner.new(str + ' ')

  until scanner.eos?
    case
    when scanner.scan(/\s+/)
      # ignore space
    when m = scanner.scan(/select\b/i)
      tokens.push [:SELECT, m]
    when m = scanner.scan(/distinct\b/i)
      tokens.push [:DISTINCT, m]
    when m = scanner.scan(/[\.]/)
      tokens.push [:DOT, m]
    when m = scanner.scan(/from\s+tree\b/i)
      tokens.push [:FROM_TREE, m]
    when m = scanner.scan(/where\b/i)
      tokens.push [:WHERE, m]
    when m = scanner.scan(/order\s+by\b/i)
      tokens.push [:ORDER_BY, m]
    when m = scanner.scan(/tagged\s+with\b/i)
      tokens.push [:TAGGED_WITH, m]
    when m = scanner.scan(/plan\b/i)
      tokens.push [:PLAN, m]
    when m = scanner.scan(/in\b/i)
      tokens.push [:IN, m]
    when m = scanner.scan(/group\s+by\b/i)
      tokens.push [:GROUP_BY, m]
    when m = scanner.scan(/\bnull\b/i)
      tokens.push [:NULL, m]
    when m = scanner.scan(/current\s+user/i)
      tokens.push [:CURRENT_USER, m]
    when m = scanner.scan(/this\s+card/i)
      tokens.push [:THIS_CARD, m]
    when m = scanner.scan(/property\b/i)
      tokens.push [:PROPERTY, m]
    when m = scanner.scan(/(and|or)\b/i)
      tokens.push [:BOOLEAN_OPERATION, m]
    when m = scanner.scan(/(is\snot\s|not\s=)/i)
      tokens.push [:COMPARISON, '!=']
    when m = scanner.scan(/(is\s)/i)
      tokens.push [:COMPARISON, '=']
    when m = scanner.scan(/(>=|<=)/)
      tokens.push [:COMPARISON, m]
    when m = scanner.scan(/(=|!=|>|<)/)
      tokens.push [:COMPARISON, m]
    when m = scanner.scan(/not\b/i)
      tokens.push [:NOT, m]
    when m = scanner.scan(/(desc|asc)\b/i)
      tokens.push [:ORDER, m]
    when m = scanner.scan(/as\s+of\b/i)
      tokens.push [:AS_OF, m]
    when m = scanner.scan(/\(/)
      tokens.push [:OPEN_BRACE, m]
    when m = scanner.scan(/\)/)
      tokens.push [:CLOSE_BRACE, m]
    when m = scanner.scan(/,/)
      tokens.push [:COMMA, m]
    when m = scanner.scan(/\*/)
      tokens.push [:STAR, m]
    when m = scanner.scan(/numbers?\b/i)
      tokens.push [:NUMBER, m]
    when m = scanner.scan(/'(((\\')|[^'])*)'/) # single quoted literal
      tokens.push [:LITERAL, unescape_quote(unquote(m))]
    when m = scanner.scan(/"(((\\")|[^"])*)"/) # double quoted literal
      tokens.push [:LITERAL, unescape_quote(unquote(m))]
    when m = scanner.scan(/\d{4}-\d{1,2}-\d{1,2}\b/)  # date literal
      tokens.push [:LITERAL, m]
    when m = scanner.scan(/((\d+\.?\d*)|(\d*\.?\d+))\b/)  # numerical literal
      tokens.push [:LITERAL, m]
    when m = scanner.scan(/(\\"|\\'|[^\b\s\(\)\*\.,\=\!><\$\%\#])+/) #rest
      tokens.push [:LITERAL, unescape_quote(m)]
    else
      raise "unexpected characters #{scanner.peek(5)}"
    end
  end
  tokens.push [false, false]
  yyparse(tokens, :each)
end
..end lib/mql.grammar modeval..id6ca7f689f1

##### racc 1.4.5 generates ###

racc_reduce_table = [
 0, 0, :racc_error,
 1, 28, :_reduce_none,
 2, 29, :_reduce_2,
 1, 29, :_reduce_3,
 2, 30, :_reduce_4,
 3, 30, :_reduce_5,
 2, 30, :_reduce_6,
 2, 30, :_reduce_7,
 2, 30, :_reduce_8,
 2, 30, :_reduce_9,
 2, 30, :_reduce_10,
 1, 31, :_reduce_11,
 3, 31, :_reduce_12,
 1, 35, :_reduce_none,
 1, 35, :_reduce_none,
 4, 36, :_reduce_15,
 1, 38, :_reduce_none,
 1, 38, :_reduce_none,
 3, 32, :_reduce_18,
 2, 32, :_reduce_19,
 3, 32, :_reduce_20,
 1, 32, :_reduce_21,
 3, 39, :_reduce_22,
 2, 39, :_reduce_23,
 3, 39, :_reduce_24,
 3, 39, :_reduce_25,
 1, 40, :_reduce_26,
 1, 40, :_reduce_27,
 3, 40, :_reduce_28,
 1, 40, :_reduce_29,
 2, 40, :_reduce_30,
 1, 40, :_reduce_31,
 1, 40, :_reduce_32,
 2, 40, :_reduce_33,
 3, 43, :_reduce_34,
 3, 33, :_reduce_35,
 1, 33, :_reduce_36,
 1, 37, :_reduce_37,
 1, 37, :_reduce_38,
 2, 37, :_reduce_39,
 2, 37, :_reduce_40,
 2, 37, :_reduce_41,
 1, 44, :_reduce_none,
 1, 44, :_reduce_none,
 3, 41, :_reduce_44,
 3, 41, :_reduce_45,
 3, 34, :_reduce_46,
 1, 34, :_reduce_47,
 2, 42, :_reduce_48,
 1, 42, :_reduce_49,
 1, 42, :_reduce_50 ]

racc_reduce_n = 51

racc_shift_n = 86

racc_action_table = [
    31,    41,    46,    31,    31,    60,     4,    83,    40,     6,
    31,    31,    25,    22,    31,    26,    22,    22,     9,     5,
     8,     7,    20,    22,    22,    77,    30,    22,    84,    19,
    31,    29,     4,    85,    54,     6,    31,    42,    25,    76,
    31,    26,    75,    22,     9,     5,     8,     7,    20,    22,
    31,    54,    30,    22,    71,    19,    25,    29,    31,    26,
    41,    31,    25,    22,    31,    26,    20,    40,    38,    45,
    30,    22,    20,    19,    22,    29,    30,    22,    31,    19,
    41,    29,    31,    69,    54,    41,    45,    40,    53,    53,
    68,    22,    40,    66,    41,    22,    63,    65,    64,    31,
    31,    40,    52,    58,    46,    38,    37,    20,    20,    31,
    23,    10,    22,    22,    19,    19,     4,    20,   nil,     6,
     4,   nil,    22,     6,    19,   nil,   nil,   nil,     9,     5,
     8,     7,     9,     5,     8,     7,    17,    31,   nil,   nil,
    17,   nil,   nil,   nil,    20,    20,    31,   nil,    20,    22,
    22,    19,    19,    22,    20,    19,    17,   nil,   nil,    22,
    49,    19,    50,    13,    20,    41,   nil,   nil,   nil,    22,
   nil,    19,    40 ]

racc_action_check = [
    71,    33,    48,     9,    31,    48,    71,    79,    33,    71,
    29,    52,    25,    71,    25,    25,     9,    31,    71,    71,
    71,    71,    25,    29,    52,    65,    25,    25,    80,    25,
    54,    25,    80,    81,    81,    80,    17,    17,    26,    64,
    26,    26,    56,    54,    80,    80,    80,    80,    26,    17,
    69,    51,    26,    26,    50,    26,     6,    26,     6,     6,
    16,    20,    46,    69,    46,    46,     6,    16,    39,    20,
     6,     6,    46,     6,    20,     6,    46,    46,    68,    46,
    57,    46,    49,    49,    35,    73,    68,    57,    34,    32,
    49,    68,    73,    49,    82,    49,    49,    49,    49,    42,
    76,    82,    30,    42,    24,    12,    10,    42,    76,    53,
     5,     1,    42,    76,    42,    76,     0,    53,   nil,     0,
     2,   nil,    53,     2,    53,   nil,   nil,   nil,     0,     0,
     0,     0,     2,     2,     2,     2,    13,     7,   nil,   nil,
    38,   nil,   nil,   nil,    13,     7,     8,   nil,    38,    13,
     7,    13,     7,    38,     8,    38,     4,   nil,   nil,     8,
    28,     8,    28,     4,     4,    28,   nil,   nil,   nil,     4,
   nil,     4,    28 ]

racc_action_pointer = [
   106,   111,   110,   nil,   152,   106,    54,   133,   142,    -1,
   106,   nil,    98,   132,   nil,   nil,    41,    32,   nil,   nil,
    57,   nil,   nil,   nil,   101,    10,    36,   nil,   146,     6,
    85,     0,    82,   -18,    81,    77,   nil,   nil,   136,    61,
   nil,   nil,    95,   nil,   nil,   nil,    60,   nil,    -1,    78,
    49,    44,     7,   105,    26,   nil,    36,    61,   nil,   nil,
   nil,   nil,   nil,   nil,    30,    21,   nil,   nil,    74,    46,
   nil,    -4,   nil,    66,   nil,   nil,    96,   nil,   nil,     1,
    22,    27,    75,   nil,   nil,   nil ]

racc_action_default = [
   -51,   -51,    -1,    -3,   -51,   -51,   -51,   -51,   -51,   -51,
   -51,    -2,    -4,   -51,   -11,   -13,   -14,   -49,   -37,   -38,
   -43,   -42,   -50,    -6,    -7,   -51,   -51,   -21,   -51,   -51,
   -51,   -49,    -8,   -36,    -9,   -10,   -47,    86,   -51,    -5,
   -40,   -41,   -51,   -48,   -39,   -43,   -51,   -19,   -51,   -51,
   -51,   -23,   -51,   -51,   -51,   -12,   -51,   -16,   -17,   -18,
   -20,   -22,   -26,   -27,   -29,   -51,   -31,   -32,   -51,   -51,
   -24,   -51,   -25,   -35,   -46,   -15,   -51,   -30,   -33,   -51,
   -51,   -51,   -28,   -34,   -45,   -44 ]

racc_goto_table = [
    11,    16,    35,     2,    33,    33,    36,    44,    12,     1,
    16,    55,    24,    56,    43,    32,    34,    39,    61,    70,
    67,   nil,    51,   nil,   nil,   nil,    36,   nil,    43,   nil,
   nil,    47,    48,   nil,   nil,    16,   nil,   nil,   nil,    57,
   nil,   nil,   nil,   nil,   nil,   nil,    62,   nil,   nil,    72,
    73,    74,    59,   nil,   nil,    78,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    81,   nil,    79,   nil,    36,   nil,
   nil,   nil,   nil,    82,    80,   nil,   nil,   nil,    11 ]

racc_goto_check = [
     3,    10,     7,     2,    10,    10,    15,    17,     4,     1,
    10,     8,     5,    11,    15,     6,     6,     4,    13,    14,
    16,   nil,     7,   nil,   nil,   nil,    15,   nil,    15,   nil,
   nil,     5,     5,   nil,   nil,    10,   nil,   nil,   nil,    10,
   nil,   nil,   nil,   nil,   nil,   nil,    15,   nil,   nil,    15,
    10,    15,     5,   nil,   nil,    17,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,     7,   nil,    15,   nil,    15,   nil,
   nil,   nil,   nil,    10,     2,   nil,   nil,   nil,     3 ]

racc_goto_pointer = [
   nil,     9,     3,    -2,     4,     6,     8,    -7,   -27,   nil,
    -3,   -29,   nil,   -31,   -31,    -3,   -29,   -13 ]

racc_goto_default = [
   nil,   nil,   nil,     3,   nil,   nil,   nil,   nil,    14,    15,
    28,   nil,    27,   nil,   nil,    21,   nil,    18 ]

racc_token_table = {
 false => 0,
 Object.new => 1,
 :NOT => 2,
 :BOOLEAN_OPERATION => 3,
 :LITERAL => 4,
 :OPEN_BRACE => 5,
 :CLOSE_BRACE => 6,
 :COMMA => 7,
 :STAR => 8,
 :DOT => 9,
 :SELECT => 10,
 :DISTINCT => 11,
 :PROPERTY => 12,
 :WHERE => 13,
 :COMPARISON => 14,
 :NULL => 15,
 :IN => 16,
 :PLAN => 17,
 :CURRENT_USER => 18,
 :NUMBER => 19,
 :THIS_CARD => 20,
 :TAGGED_WITH => 21,
 :FROM_TREE => 22,
 :AS_OF => 23,
 :GROUP_BY => 24,
 :ORDER_BY => 25,
 :ORDER => 26 }

racc_use_result_var = false

racc_nt_base = 27

Racc_arg = [
 racc_action_table,
 racc_action_check,
 racc_action_default,
 racc_action_pointer,
 racc_goto_table,
 racc_goto_check,
 racc_goto_default,
 racc_goto_pointer,
 racc_nt_base,
 racc_reduce_table,
 racc_token_table,
 racc_shift_n,
 racc_reduce_n,
 racc_use_result_var ]

Racc_token_to_s_table = [
'$end',
'error',
'NOT',
'BOOLEAN_OPERATION',
'LITERAL',
'OPEN_BRACE',
'CLOSE_BRACE',
'COMMA',
'STAR',
'DOT',
'SELECT',
'DISTINCT',
'PROPERTY',
'WHERE',
'COMPARISON',
'NULL',
'IN',
'PLAN',
'CURRENT_USER',
'NUMBER',
'THIS_CARD',
'TAGGED_WITH',
'FROM_TREE',
'AS_OF',
'GROUP_BY',
'ORDER_BY',
'ORDER',
'$start',
'target',
'statements',
'statement',
'columns',
'conditions',
'properties',
'literals',
'column',
'aggregate_function',
'property',
'aggregate_target',
'condition',
'property_value',
'values',
'literal',
'project_variable',
'property_name']

Racc_debug_parser = false

##### racc system variables end #####

 # reduce 0 omitted

 # reduce 1 omitted

module_eval <<'.,.,', 'lib/mql.grammar', 25
  def _reduce_2( val, _values)
 node :statements, val[0].ast + [val[1]]
  end
.,.,

module_eval <<'.,.,', 'lib/mql.grammar', 26
  def _reduce_3( val, _values)
 node :statements, [val[0]]
  end
.,.,

module_eval <<'.,.,', 'lib/mql.grammar', 30
  def _reduce_4( val, _values)
 node :select, :columns => val[1], :distinct => false
  end
.,.,

module_eval <<'.,.,', 'lib/mql.grammar', 31
  def _reduce_5( val, _values)
 node :select, :columns => val[2], :distinct => true
  end
.,.,

module_eval <<'.,.,', 'lib/mql.grammar', 32
  def _reduce_6( val, _values)
 node :as_of, val[1]
  end
.,.,

module_eval <<'.,.,', 'lib/mql.grammar', 33
  def _reduce_7( val, _values)
 node :where, val[1]
  end
.,.,

module_eval <<'.,.,', 'lib/mql.grammar', 34
  def _reduce_8( val, _values)
 node :order_by, val[1]
  end
.,.,

module_eval <<'.,.,', 'lib/mql.grammar', 35
  def _reduce_9( val, _values)
 node :group_by, val[1]
  end
.,.,

module_eval <<'.,.,', 'lib/mql.grammar', 36
  def _reduce_10( val, _values)
 node :from, :trees => val[1]
  end
.,.,

module_eval <<'.,.,', 'lib/mql.grammar', 40
  def _reduce_11( val, _values)
 [val[0]]
  end
.,.,

module_eval <<'.,.,', 'lib/mql.grammar', 41
  def _reduce_12( val, _values)
 val[0] + [val[2]]
  end
.,.,

 # reduce 13 omitted

 # reduce 14 omitted

module_eval <<'.,.,', 'lib/mql.grammar', 50
  def _reduce_15( val, _values)
 node :aggregate, :function => val[0], :property => val[2]
  end
.,.,

 # reduce 16 omitted

 # reduce 17 omitted

module_eval <<'.,.,', 'lib/mql.grammar', 59
  def _reduce_18( val, _values)
 node val[1].downcase.to_sym, [val[0], val[2]]
  end
.,.,

module_eval <<'.,.,', 'lib/mql.grammar', 60
  def _reduce_19( val, _values)
 node :not, val[1]
  end
.,.,

module_eval <<'.,.,', 'lib/mql.grammar', 61
  def _reduce_20( val, _values)
 val[1]
  end
.,.,

module_eval <<'.,.,', 'lib/mql.grammar', 62
  def _reduce_21( val, _values)
 val[0]
  end
.,.,

module_eval <<'.,.,', 'lib/mql.grammar', 66
  def _reduce_22( val, _values)
 node :comparision, val
  end
.,.,

module_eval <<'.,.,', 'lib/mql.grammar', 67
  def _reduce_23( val, _values)
 node :tagged, :with => val[1]
  end
.,.,

module_eval <<'.,.,', 'lib/mql.grammar', 68
  def _reduce_24( val, _values)
 node :in, :property => val[0], :values => val[2]
  end
.,.,

module_eval <<'.,.,', 'lib/mql.grammar', 69
  def _reduce_25( val, _values)
 node :in, :plan => val[2]
  end
.,.,

module_eval <<'.,.,', 'lib/mql.grammar', 73
  def _reduce_26( val, _values)
 val[0]
  end
.,.,

module_eval <<'.,.,', 'lib/mql.grammar', 74
  def _reduce_27( val, _values)
 node :context, :type => 'user'
  end
.,.,

module_eval <<'.,.,', 'lib/mql.grammar', 75
  def _reduce_28( val, _values)
 node :context, :type => 'card', :property => val[2]
  end
.,.,

module_eval <<'.,.,', 'lib/mql.grammar', 76
  def _reduce_29( val, _values)
 node :context, :type => 'card'
  end
.,.,

module_eval <<'.,.,', 'lib/mql.grammar', 77
  def _reduce_30( val, _values)
 node :card_number, val[1]
  end
.,.,

module_eval <<'.,.,', 'lib/mql.grammar', 78
  def _reduce_31( val, _values)
 node :null
  end
.,.,

module_eval <<'.,.,', 'lib/mql.grammar', 79
  def _reduce_32( val, _values)
 val[0]
  end
.,.,

module_eval <<'.,.,', 'lib/mql.grammar', 80
  def _reduce_33( val, _values)
 node :property, :name => val[1]
  end
.,.,

module_eval <<'.,.,', 'lib/mql.grammar', 84
  def _reduce_34( val, _values)
 node :project_variable, val[1]
  end
.,.,

module_eval <<'.,.,', 'lib/mql.grammar', 88
  def _reduce_35( val, _values)
 val[0] + [val[2]]
  end
.,.,

module_eval <<'.,.,', 'lib/mql.grammar', 89
  def _reduce_36( val, _values)
 [val[0]]
  end
.,.,

module_eval <<'.,.,', 'lib/mql.grammar', 93
  def _reduce_37( val, _values)
 node :property, :name => val[0]
  end
.,.,

module_eval <<'.,.,', 'lib/mql.grammar', 94
  def _reduce_38( val, _values)
 node :property, :name => val[0]
  end
.,.,

module_eval <<'.,.,', 'lib/mql.grammar', 95
  def _reduce_39( val, _values)
 node :property, :name => val[1]
  end
.,.,

module_eval <<'.,.,', 'lib/mql.grammar', 96
  def _reduce_40( val, _values)
 node :property, :name => val[0].ast[:name], :order => val[1]
  end
.,.,

module_eval <<'.,.,', 'lib/mql.grammar', 97
  def _reduce_41( val, _values)
 node :property, :name => val[0].ast[:name], :key => 'number'
  end
.,.,

 # reduce 42 omitted

 # reduce 43 omitted

module_eval <<'.,.,', 'lib/mql.grammar', 106
  def _reduce_44( val, _values)
 val[1]
  end
.,.,

module_eval <<'.,.,', 'lib/mql.grammar', 107
  def _reduce_45( val, _values)
 val[1]
  end
.,.,

module_eval <<'.,.,', 'lib/mql.grammar', 111
  def _reduce_46( val, _values)
 node :literals, val[0].ast + [val[2]]
  end
.,.,

module_eval <<'.,.,', 'lib/mql.grammar', 112
  def _reduce_47( val, _values)
 node :literals, [val[0]]
  end
.,.,

module_eval <<'.,.,', 'lib/mql.grammar', 116
  def _reduce_48( val, _values)
 val[0] + ' ' + val[1]
  end
.,.,

module_eval <<'.,.,', 'lib/mql.grammar', 117
  def _reduce_49( val, _values)
 val[0]
  end
.,.,

module_eval <<'.,.,', 'lib/mql.grammar', 118
  def _reduce_50( val, _values)
 val[0]
  end
.,.,

 def _reduce_none( val, _values)
  val[0]
 end

  end   # class Parser

end   # module Mql
