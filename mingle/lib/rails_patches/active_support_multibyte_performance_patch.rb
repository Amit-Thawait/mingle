#  Copyright 2020 ThoughtWorks, Inc.
#  
#  This program is free software: you can redistribute it and/or modify
#  it under the terms of the GNU Affero General Public License as
#  published by the Free Software Foundation, either version 3 of the
#  License, or (at your option) any later version.
#  
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU Affero General Public License for more details.
#  
#  You should have received a copy of the GNU Affero General Public License
#  along with this program.  If not, see <https://www.gnu.org/licenses/agpl-3.0.txt>.

#ActiveSupport::MultiByte::Utils has 2 methods - verify and clean - which can be bottlenecks to performance
#due to their original implementation and the sheer number of times they get executed in every response. 
#Their purpose is to ensure that a multi-byte string which is sliced or truncated isn't left in such a
#way so as to cause an invalid codepoint. Thus they iterate over every character in every link name generated by
#url_for to verify this. This following patch should provide a 10-40% improvement in numbers for this operation.
#
#https://rails.lighthouseapp.com/projects/8994/tickets/3158-multibyte-cleanup-cleanup-performance-and-readability


module ActiveSupport #:nodoc:
  module Multibyte #:nodoc:
    if 'string'.respond_to?(:valid_encoding?)
      # Verifies the encoding of a string
      def self.verify(string)
        string.valid_encoding?
      end
    else
      def self.verify(string)
        if expression = valid_character
          # note: split(//) will split on Unicode characters if $KCODE='UTF8'
          string.split(//).all? {|c| expression.match(c)}
        else
          true
        end
      end
    end


    if 'string'.respond_to?(:force_encoding)
      # Removes all invalid characters from the string.
      #
      # Note: this method is a no-op in Ruby 1.9
      def self.clean(string)
        string
      end
    else
      def self.clean(string)
        if expression = valid_character
          # note: split(//) will split on Unicode characters if $KCODE='UTF8'
          string.split(//).grep(expression).join
        else
          string
        end
      end
    end
  end
end
