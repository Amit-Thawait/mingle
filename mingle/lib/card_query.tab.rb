# DO NOT MODIFY!!!!
# This file is automatically generated by racc 1.4.5
# from racc grammer file "lib/card_query.grammar".

#  Copyright 2020 ThoughtWorks, Inc.
#
#  This program is free software: you can redistribute it and/or modify
#  it under the terms of the GNU Affero General Public License as
#  published by the Free Software Foundation, either version 3 of the
#  License, or (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU Affero General Public License for more details.
#
#  You should have received a copy of the GNU Affero General Public License
#  along with this program.  If not, see <https://www.gnu.org/licenses/agpl-3.0.txt>.

#

require 'racc/parser'


require 'strscan'


class CardQueryParser < Racc::Parser

module_eval <<'..end lib/card_query.grammar modeval..idc4d8225698', 'lib/card_query.grammar', 246

def unquote(value)
  case value
  when /^'(.*)'$/ then $1
  when /^"(.*)"$/ then $1
  else value
  end
end

def unescape_quote(value)
  value.gsub(/\\(['|"])/, '\1')
end


def parse(str, options={})
  @input = str
  @options = options
  tokens = []
  str = "" if str.nil?
  scanner = StringScanner.new(str + ' ')

  until scanner.eos?
    case
    when scanner.scan(/\s+/)
      # ignore space
    when m = scanner.scan(/select\b/i)
      tokens.push [:SELECT, m]
    when m = scanner.scan(/distinct\b/i)
      tokens.push [:DISTINCT, m]
    when m = scanner.scan(/[\.]/)
      tokens.push [:DOT, m]
    when m = scanner.scan(/\*/i)
      tokens.push [:STAR, m]
    when m = scanner.scan(/from\b/i)
      tokens.push [:FROM, m]
    when m = scanner.scan(/tree\b/i)
      tokens.push [:TREE, m]
    when m = scanner.scan(/where\b/i)
      tokens.push [:WHERE, m]
    when m = scanner.scan(/group\s+by\b/i)
      tokens.push [:GROUP_BY, m]
    when m = scanner.scan(/order\s+by\b/i)
      tokens.push [:ORDER_BY, m]
    when m = scanner.scan(/tagged\s+with\b/i)
      tokens.push [:TAGGED_WITH, m]
    when m = scanner.scan(/in plan\b/i)
      tokens.push   [:IN_PLAN, m]
    when m = scanner.scan(/null\b/i)
      tokens.push [:NULL, m]
    when m = scanner.scan(/current\s+user\b/i)
      tokens.push [:CURRENT_USER, m]
    when m = scanner.scan(/this card/i)
      tokens.push [:THIS_CARD, m]
    when m = scanner.scan(/in\b/i)
      tokens.push [:IN, m]
    when m = scanner.scan(/,/)
      tokens.push [:COMMA, m]
    when m = scanner.scan(/<=/)
      tokens.push [:LESS_THAN_OR_EQUALS, m]
    when m = scanner.scan(/>=/)
      tokens.push [:GREATER_THAN_OR_EQUALS, m]
    when m = scanner.scan(/</)
      tokens.push [:LESS_THAN, m]
    when m = scanner.scan(/>/)
      tokens.push [:GREATER_THAN, m]
    when m = scanner.scan(/!=|is\snot|not\s=/i)
      tokens.push [:NOT_EQUAL, m]
    when m = scanner.scan(/=|is\b/i)
      tokens.push [:EQUAL, m]
    when m = scanner.scan(/and\b/i)
      tokens.push   [:AND, m]
    when m = scanner.scan(/or\b/i)
      tokens.push   [:OR, m]
    when m = scanner.scan(/not\b/i)
      tokens.push   [:NOT, m]
    when m = scanner.scan(/today\b/i)
      tokens.push   [:TODAY, m]
    when m = scanner.scan(/property\b/i)
      tokens.push   [:PROPERTY, m]
    when m = scanner.scan(/number\b/i)
      tokens.push   [:NUMBER, m]
    when m = scanner.scan(/numbers\b/i)
      tokens.push   [:NUMBERS, m]
    when m = scanner.scan(/(asc|desc)\b/i)
      tokens.push   [:ORDER, m]
    when m = scanner.scan(/as\s+of\b/i)
      tokens.push   [:AS_OF, m]
    when m = scanner.scan(/'(((\\')|[^'])*)'/)
      tokens.push   [:IDENTIFIER, unescape_quote(unquote(m))]
    when m = scanner.scan(/"(((\\")|[^"])*)"/)
      tokens.push   [:IDENTIFIER, unescape_quote(unquote(m))]
    when m = scanner.scan(/((\d+\.?\d*)|(\d*\.?\d+))\b/)  
      tokens.push   [:IDENTIFIER, m]      
    when m = scanner.scan(/(\\"|\\'|[^\b\s\(\)\*\.,\=\!><\$\%\#])+/)
      tokens.push   [:IDENTIFIER, unescape_quote(m)]
    when m = scanner.scan(/\(/)
      tokens.push   [:OPEN_BRACE, m]
    when m = scanner.scan(/\)/)
      tokens.push   [:CLOSE_BRACE, m]
    else
      raise "unexpected characters #{scanner.peek(5)}"
    end
  end
  tokens.push [false, false]
  yyparse(tokens, :each)
end
..end lib/card_query.grammar modeval..idc4d8225698

##### racc 1.4.5 generates ###

racc_reduce_table = [
 0, 0, :racc_error,
 6, 37, :_reduce_1,
 1, 37, :_reduce_2,
 0, 38, :_reduce_3,
 1, 38, :_reduce_none,
 0, 40, :_reduce_none,
 1, 40, :_reduce_none,
 0, 41, :_reduce_none,
 1, 41, :_reduce_none,
 0, 42, :_reduce_none,
 1, 42, :_reduce_none,
 0, 43, :_reduce_none,
 1, 43, :_reduce_none,
 0, 39, :_reduce_none,
 1, 39, :_reduce_none,
 2, 45, :_reduce_15,
 3, 45, :_reduce_16,
 1, 51, :_reduce_17,
 1, 51, :_reduce_18,
 3, 51, :_reduce_19,
 3, 51, :_reduce_20,
 2, 46, :_reduce_21,
 2, 54, :_reduce_22,
 1, 52, :_reduce_23,
 2, 52, :_reduce_24,
 1, 52, :_reduce_25,
 2, 52, :_reduce_26,
 1, 52, :_reduce_27,
 2, 52, :_reduce_28,
 1, 52, :_reduce_none,
 2, 56, :_reduce_30,
 2, 56, :_reduce_31,
 3, 57, :_reduce_32,
 3, 57, :_reduce_33,
 4, 53, :_reduce_34,
 4, 53, :_reduce_35,
 2, 47, :_reduce_36,
 2, 48, :_reduce_37,
 1, 58, :_reduce_38,
 3, 58, :_reduce_39,
 2, 49, :_reduce_40,
 1, 59, :_reduce_41,
 3, 59, :_reduce_42,
 3, 44, :_reduce_43,
 3, 44, :_reduce_44,
 2, 44, :_reduce_45,
 3, 44, :_reduce_46,
 1, 44, :_reduce_none,
 2, 50, :_reduce_48,
 3, 62, :_reduce_49,
 6, 63, :_reduce_50,
 1, 64, :_reduce_51,
 1, 64, :_reduce_52,
 1, 64, :_reduce_53,
 1, 64, :_reduce_54,
 1, 64, :_reduce_55,
 1, 64, :_reduce_56,
 1, 61, :_reduce_57,
 1, 61, :_reduce_58,
 1, 61, :_reduce_59,
 1, 61, :_reduce_60,
 1, 61, :_reduce_61,
 1, 61, :_reduce_62,
 1, 61, :_reduce_63,
 3, 65, :_reduce_64,
 1, 66, :_reduce_65,
 2, 66, :_reduce_66,
 1, 67, :_reduce_67,
 1, 67, :_reduce_68,
 1, 67, :_reduce_69,
 1, 55, :_reduce_70,
 3, 55, :_reduce_71,
 3, 68, :_reduce_72,
 3, 60, :_reduce_73,
 4, 60, :_reduce_74,
 3, 60, :_reduce_75,
 3, 60, :_reduce_76,
 3, 60, :_reduce_77,
 3, 60, :_reduce_78,
 3, 60, :_reduce_79,
 3, 60, :_reduce_80,
 3, 60, :_reduce_81,
 3, 60, :_reduce_82,
 3, 60, :_reduce_83,
 3, 60, :_reduce_84,
 3, 60, :_reduce_85,
 4, 60, :_reduce_86,
 4, 60, :_reduce_87,
 3, 60, :_reduce_88,
 2, 60, :_reduce_89,
 2, 60, :_reduce_90 ]

racc_reduce_n = 91

racc_shift_n = 138

racc_action_table = [
     5,   104,    10,    32,     5,   104,    68,    24,    69,    16,
    11,    10,    71,    10,    15,    77,    31,    71,    10,   109,
   100,    12,    74,    29,     6,    73,    27,    70,    16,    11,
    10,    27,    96,    15,     7,     8,     7,     8,    21,    22,
    12,     7,     8,     6,    16,    11,    10,   114,    64,    15,
    16,    11,    10,     7,     8,    15,    12,   115,   112,     6,
    28,    66,    12,    67,   113,     6,    16,    11,    10,     7,
     8,    15,    16,    11,    10,     7,     8,    15,    12,   116,
    10,     6,    10,    92,    12,    71,    10,     6,   100,    10,
   118,     7,     8,    27,    10,    27,    20,     7,     8,     6,
    96,    91,     6,     7,     8,     7,     8,     6,    10,     7,
     8,    10,     7,     8,   120,    21,    22,     7,     8,    21,
    22,     6,    65,   121,     6,    37,    38,    39,    40,   124,
    28,     7,     8,    35,     7,     8,    42,    71,    36,    50,
   100,    71,    43,    44,   100,   131,    85,   133,    52,    20,
   109,    57,    96,    54,    17,    53,    96,   124,    55,    56,
    58,    52,    30,    95,    57,    92,    54,    45,    53,    21,
    87,    55,    56,    58,    52,    85,    82,    57,    81,    54,
    78,    53,    46,    63,    55,    56,    58,    62,    47,    50 ]

racc_action_check = [
    78,    81,    41,    10,     0,    82,    36,     5,    36,     0,
     0,     0,    41,     5,     0,    41,    10,    78,    24,    83,
    78,     0,    41,     7,     0,    41,     5,    41,    21,    21,
    21,    24,    78,    21,     0,     0,     5,     5,     3,     3,
    21,    24,    24,    21,    22,    22,    22,    92,    27,    22,
    85,    85,    85,    21,    21,    85,    22,    92,    90,    22,
    27,    35,    85,    35,    91,    85,    12,    12,    12,    22,
    22,    12,    11,    11,    11,    85,    85,    11,    12,    93,
    62,    12,    63,    96,    11,   120,    64,    11,   120,   109,
    97,    12,    12,    62,   124,    63,    98,    11,    11,    64,
   120,    64,   109,    62,    62,    63,    63,   124,   131,    64,
    64,   133,   109,   109,   102,    34,    34,   124,   124,   110,
   110,   131,    34,   103,   133,    14,    14,    14,    14,   107,
     6,   131,   131,    14,   133,   133,    14,    87,    14,   119,
    87,   104,    14,    14,   104,   126,   127,   130,    20,     2,
   132,    20,    87,    20,     1,    20,   104,   135,    20,    20,
    20,    94,     8,    73,    94,    70,    94,    15,    94,    60,
    50,    94,    94,    94,    71,    48,    44,    71,    43,    71,
    42,    71,    16,    26,    71,    71,    71,    25,    17,    18 ]

racc_action_pointer = [
     2,   154,   138,    25,   nil,     4,    99,    -8,   131,   nil,
    -6,    65,    59,   nil,   110,   145,   160,   188,   179,   nil,
   126,    21,    37,   nil,     9,   166,   162,    29,   nil,   nil,
   nil,   nil,   nil,   nil,   102,    36,   -19,   nil,   nil,   nil,
   nil,    -7,   161,   152,   150,   nil,   nil,   nil,   171,   nil,
   140,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   156,   nil,    71,    73,    77,   nil,   nil,   nil,   nil,   nil,
   130,   152,   nil,   141,   nil,   nil,   nil,   nil,    -2,   nil,
   nil,   -18,   -14,    14,   nil,    43,   nil,   118,   nil,   nil,
    38,    44,    25,    59,   139,   nil,    48,    70,    85,   nil,
   nil,   nil,    93,   103,   122,   nil,   nil,   123,   nil,    80,
   106,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   129,
    66,   nil,   nil,   nil,    85,   nil,   124,   142,   nil,   nil,
   126,    99,   145,   102,   nil,   151,   nil,   nil ]

racc_action_default = [
    -3,   -91,   -13,    -2,    -4,   -91,   -23,   -25,   -27,   -29,
   -91,   -91,   -91,   -47,   -91,   -91,   -91,   -91,    -5,   -14,
   -91,   -91,   -91,   -15,   -91,   -17,   -18,   -23,   -24,   -26,
   -28,   -30,   -31,   -45,   -91,   -51,   -52,   -53,   -54,   -55,
   -56,   -91,   -91,   -91,   -91,   -89,   -90,   138,    -7,    -6,
   -91,   -48,   -57,   -58,   -59,   -60,   -61,   -62,   -63,   -43,
   -44,   -16,   -91,   -91,   -91,   -46,   -81,   -83,   -82,   -84,
   -80,   -91,   -73,   -75,   -76,   -77,   -78,   -79,   -91,   -85,
   -88,   -91,   -91,    -9,    -8,   -91,   -21,   -91,   -20,   -19,
   -91,   -91,   -91,   -91,   -65,   -74,   -91,   -91,   -13,   -67,
   -68,   -69,   -70,   -91,   -91,   -86,   -87,   -11,   -10,   -91,
   -36,   -22,   -34,   -35,   -32,   -33,   -64,   -66,   -49,    -5,
   -91,   -72,    -1,   -12,   -91,   -37,   -38,    -7,   -71,   -40,
   -41,   -91,    -9,   -91,   -39,   -11,   -42,   -50 ]

racc_goto_table = [
    25,    48,    18,     3,    83,   107,     4,    23,    79,   111,
   122,    93,   129,   125,    33,    34,    86,     2,    76,    25,
    75,   136,    51,    80,    59,    60,    61,    97,    41,    72,
     1,   nil,   nil,   nil,   117,   134,   nil,   nil,   137,   nil,
   nil,   nil,   128,   nil,   nil,   nil,   nil,   105,   106,   nil,
   nil,   nil,   nil,   nil,   135,   nil,   nil,    25,    25,    90,
   nil,   nil,   nil,   nil,    88,    89,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   132,    98,   nil,   nil,   nil,   110,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   119,   nil,
   nil,   nil,   127,   nil,   126,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   130,
   nil,   nil,   nil,   nil,   nil,   nil,   126,   nil,   130 ]

racc_goto_check = [
    16,     4,     3,     8,     5,     6,     9,    15,    32,    19,
     7,    30,    23,    22,     8,     8,    18,     2,    20,    16,
    21,    23,    25,    26,     8,     8,    15,    27,    28,    29,
     1,   nil,   nil,   nil,    30,    22,   nil,   nil,     7,   nil,
   nil,   nil,    19,   nil,   nil,   nil,   nil,    32,    32,   nil,
   nil,   nil,   nil,   nil,     6,   nil,   nil,    16,    16,    16,
   nil,   nil,   nil,   nil,    15,    15,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,     5,     9,   nil,   nil,   nil,     8,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,     3,   nil,
   nil,   nil,     4,   nil,    16,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    16,
   nil,   nil,   nil,   nil,   nil,   nil,    16,   nil,    16 ]

racc_goto_pointer = [
   nil,    30,    17,     0,   -17,   -44,   -78,   -97,     3,     6,
   nil,   nil,   nil,   nil,   nil,     2,    -5,   nil,   -34,   -78,
   -23,   -21,   -96,  -112,   nil,     2,   -19,   -51,    14,   -12,
   -60,   nil,   -34 ]

racc_goto_default = [
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    49,    84,   108,   123,    19,   nil,    14,    26,   nil,   103,
     9,    99,   nil,   nil,    13,    94,   nil,   nil,   nil,   101,
   nil,   102,   nil ]

racc_token_table = {
 false => 0,
 Object.new => 1,
 :SELECT => 2,
 :DISTINCT => 3,
 :WHERE => 4,
 :GROUP_BY => 5,
 :ORDER_BY => 6,
 :TAGGED_WITH => 7,
 :NOT => 8,
 :PROPERTY => 9,
 :FROM => 10,
 :AS_OF => 11,
 :IN_PLAN => 12,
 :AND => 13,
 :OR => 14,
 :LESS_THAN => 15,
 :GREATER_THAN => 16,
 :LESS_THAN_OR_EQUALS => 17,
 :GREATER_THAN_OR_EQUALS => 18,
 :OPEN_BRACE => 19,
 :CLOSE_BRACE => 20,
 :COMMA => 21,
 :IDENTIFIER => 22,
 :EQUAL => 23,
 :STAR => 24,
 :NULL => 25,
 :IN => 26,
 :CURRENT_USER => 27,
 :NOT_EQUAL => 28,
 :TODAY => 29,
 :TREE => 30,
 :ORDER => 31,
 :NUMBER => 32,
 :NUMBERS => 33,
 :THIS_CARD => 34,
 :DOT => 35 }

racc_use_result_var = false

racc_nt_base = 36

Racc_arg = [
 racc_action_table,
 racc_action_check,
 racc_action_default,
 racc_action_pointer,
 racc_goto_table,
 racc_goto_check,
 racc_goto_default,
 racc_goto_pointer,
 racc_nt_base,
 racc_reduce_table,
 racc_token_table,
 racc_shift_n,
 racc_reduce_n,
 racc_use_result_var ]

Racc_token_to_s_table = [
'$end',
'error',
'SELECT',
'DISTINCT',
'WHERE',
'GROUP_BY',
'ORDER_BY',
'TAGGED_WITH',
'NOT',
'PROPERTY',
'FROM',
'AS_OF',
'IN_PLAN',
'AND',
'OR',
'LESS_THAN',
'GREATER_THAN',
'LESS_THAN_OR_EQUALS',
'GREATER_THAN_OR_EQUALS',
'OPEN_BRACE',
'CLOSE_BRACE',
'COMMA',
'IDENTIFIER',
'EQUAL',
'STAR',
'NULL',
'IN',
'CURRENT_USER',
'NOT_EQUAL',
'TODAY',
'TREE',
'ORDER',
'NUMBER',
'NUMBERS',
'THIS_CARD',
'DOT',
'$start',
'target',
'opt_select',
'opt_as_of',
'opt_from',
'opt_where',
'opt_group_by',
'opt_order_by',
'conditions',
'select',
'from',
'where',
'group_by',
'order_by',
'as_of',
'select_columns',
'column',
'aggregate_function',
'container',
'value_string',
'property',
'this_card_property',
'group_by_columns',
'order_by_columns',
'condition',
'identifier',
'simple_mql_expression',
'mql',
'operator',
'plv',
'plv_name',
'value',
'values']

Racc_debug_parser = false

##### racc system variables end #####

 # reduce 0 omitted

module_eval <<'.,.,', 'lib/card_query.grammar', 45
  def _reduce_1( val, _values)
      CardQuery.new(@options.merge(
        :columns => val[0][:columns],
        :distinct => val[0][:distinct],
        :from => val[2],
        :conditions => val[3],
        :group_by => val[4],
        :order_by => val[5],
        :as_of => val[1]))
  end
.,.,

module_eval <<'.,.,', 'lib/card_query.grammar', 45
  def _reduce_2( val, _values)
 CardQuery.new(:conditions => val[0])
  end
.,.,

module_eval <<'.,.,', 'lib/card_query.grammar', 49
  def _reduce_3( val, _values)
 { :columns => nil, :distinct => false }
  end
.,.,

 # reduce 4 omitted

 # reduce 5 omitted

 # reduce 6 omitted

 # reduce 7 omitted

 # reduce 8 omitted

 # reduce 9 omitted

 # reduce 10 omitted

 # reduce 11 omitted

 # reduce 12 omitted

 # reduce 13 omitted

 # reduce 14 omitted

module_eval <<'.,.,', 'lib/card_query.grammar', 79
  def _reduce_15( val, _values)
 { :columns => val[1], :distinct => false }
  end
.,.,

module_eval <<'.,.,', 'lib/card_query.grammar', 80
  def _reduce_16( val, _values)
 { :columns => val[2], :distinct => true }
  end
.,.,

module_eval <<'.,.,', 'lib/card_query.grammar', 84
  def _reduce_17( val, _values)
 [val[0]]
  end
.,.,

module_eval <<'.,.,', 'lib/card_query.grammar', 85
  def _reduce_18( val, _values)
 [val[0]]
  end
.,.,

module_eval <<'.,.,', 'lib/card_query.grammar', 86
  def _reduce_19( val, _values)
 [val[0]] + val[2]
  end
.,.,

module_eval <<'.,.,', 'lib/card_query.grammar', 87
  def _reduce_20( val, _values)
 [val[0]] + val[2]
  end
.,.,

module_eval <<'.,.,', 'lib/card_query.grammar', 91
  def _reduce_21( val, _values)
 val[1]
  end
.,.,

module_eval <<'.,.,', 'lib/card_query.grammar', 95
  def _reduce_22( val, _values)
 CardQuery::Tree.new(val[1])
  end
.,.,

module_eval <<'.,.,', 'lib/card_query.grammar', 99
  def _reduce_23( val, _values)
 CardQuery::Column.new(val[0])
  end
.,.,

module_eval <<'.,.,', 'lib/card_query.grammar', 100
  def _reduce_24( val, _values)
 CardQuery::Column.new(val[0], val[1])
  end
.,.,

module_eval <<'.,.,', 'lib/card_query.grammar', 101
  def _reduce_25( val, _values)
 CardQuery::Column.new(val[0])
  end
.,.,

module_eval <<'.,.,', 'lib/card_query.grammar', 102
  def _reduce_26( val, _values)
 CardQuery::Column.new(val[0], val[1])
  end
.,.,

module_eval <<'.,.,', 'lib/card_query.grammar', 103
  def _reduce_27( val, _values)
 CardQuery::Column.new(val[0])
  end
.,.,

module_eval <<'.,.,', 'lib/card_query.grammar', 104
  def _reduce_28( val, _values)
 CardQuery::Column.new(val[0], val[1])
  end
.,.,

 # reduce 29 omitted

module_eval <<'.,.,', 'lib/card_query.grammar', 109
  def _reduce_30( val, _values)
 CardQuery::Column.new(val[1])
  end
.,.,

module_eval <<'.,.,', 'lib/card_query.grammar', 110
  def _reduce_31( val, _values)
 CardQuery::Column.new(val[1])
  end
.,.,

module_eval <<'.,.,', 'lib/card_query.grammar', 114
  def _reduce_32( val, _values)
 CardQuery::ThisCardProperty.new(val[2], @options)
  end
.,.,

module_eval <<'.,.,', 'lib/card_query.grammar', 115
  def _reduce_33( val, _values)
 CardQuery::ThisCardProperty.new(val[2], @options)
  end
.,.,

module_eval <<'.,.,', 'lib/card_query.grammar', 119
  def _reduce_34( val, _values)
 CardQuery::AggregateFunction.new(val[0], val[2])
  end
.,.,

module_eval <<'.,.,', 'lib/card_query.grammar', 120
  def _reduce_35( val, _values)
 CardQuery::AggregateFunction.new(val[0], CardQuery::Star.new)
  end
.,.,

module_eval <<'.,.,', 'lib/card_query.grammar', 124
  def _reduce_36( val, _values)
 val[1]
  end
.,.,

module_eval <<'.,.,', 'lib/card_query.grammar', 128
  def _reduce_37( val, _values)
 val[1]
  end
.,.,

module_eval <<'.,.,', 'lib/card_query.grammar', 132
  def _reduce_38( val, _values)
 [CardQuery::GroupByColumn.new(val[0])]
  end
.,.,

module_eval <<'.,.,', 'lib/card_query.grammar', 133
  def _reduce_39( val, _values)
 [CardQuery::GroupByColumn.new(val[0])] + val[2]
  end
.,.,

module_eval <<'.,.,', 'lib/card_query.grammar', 137
  def _reduce_40( val, _values)
 val[1]
  end
.,.,

module_eval <<'.,.,', 'lib/card_query.grammar', 141
  def _reduce_41( val, _values)
 [CardQuery::OrderByColumn.new(val[0])]
  end
.,.,

module_eval <<'.,.,', 'lib/card_query.grammar', 142
  def _reduce_42( val, _values)
 [CardQuery::OrderByColumn.new(val[0])] + val[2]
  end
.,.,

module_eval <<'.,.,', 'lib/card_query.grammar', 146
  def _reduce_43( val, _values)
 CardQuery::And.new(val[0], val[2])
  end
.,.,

module_eval <<'.,.,', 'lib/card_query.grammar', 147
  def _reduce_44( val, _values)
 CardQuery::Or.new(val[0], val[2])
  end
.,.,

module_eval <<'.,.,', 'lib/card_query.grammar', 148
  def _reduce_45( val, _values)
 CardQuery::Not.new(val[1])
  end
.,.,

module_eval <<'.,.,', 'lib/card_query.grammar', 149
  def _reduce_46( val, _values)
 val[1]
  end
.,.,

 # reduce 47 omitted

module_eval <<'.,.,', 'lib/card_query.grammar', 154
  def _reduce_48( val, _values)
 val[1]
  end
.,.,

module_eval <<'.,.,', 'lib/card_query.grammar', 158
  def _reduce_49( val, _values)
 val[1]
  end
.,.,

module_eval <<'.,.,', 'lib/card_query.grammar', 174
  def _reduce_50( val, _values)
    CardQuery.new(
      :columns => val[0][:columns],
      :distinct => val[0][:distinct],
      :from => val[2],
      :conditions => val[3],
      :group_by => val[4],
      :order_by => val[5],
      :as_of => val[1],
      :sub_query => true)
  end
.,.,

module_eval <<'.,.,', 'lib/card_query.grammar', 177
  def _reduce_51( val, _values)
 Operator.equals
  end
.,.,

module_eval <<'.,.,', 'lib/card_query.grammar', 178
  def _reduce_52( val, _values)
 Operator.not_equals
  end
.,.,

module_eval <<'.,.,', 'lib/card_query.grammar', 179
  def _reduce_53( val, _values)
 Operator.less_than
  end
.,.,

module_eval <<'.,.,', 'lib/card_query.grammar', 180
  def _reduce_54( val, _values)
 Operator.greater_than
  end
.,.,

module_eval <<'.,.,', 'lib/card_query.grammar', 181
  def _reduce_55( val, _values)
 Operator.less_than_or_equals
  end
.,.,

module_eval <<'.,.,', 'lib/card_query.grammar', 182
  def _reduce_56( val, _values)
 Operator.greater_than_or_equals
  end
.,.,

module_eval <<'.,.,', 'lib/card_query.grammar', 186
  def _reduce_57( val, _values)
 val[0]
  end
.,.,

module_eval <<'.,.,', 'lib/card_query.grammar', 187
  def _reduce_58( val, _values)
 val[0]
  end
.,.,

module_eval <<'.,.,', 'lib/card_query.grammar', 188
  def _reduce_59( val, _values)
 val[0]
  end
.,.,

module_eval <<'.,.,', 'lib/card_query.grammar', 189
  def _reduce_60( val, _values)
 val[0]
  end
.,.,

module_eval <<'.,.,', 'lib/card_query.grammar', 190
  def _reduce_61( val, _values)
 val[0]
  end
.,.,

module_eval <<'.,.,', 'lib/card_query.grammar', 191
  def _reduce_62( val, _values)
 val[0]
  end
.,.,

module_eval <<'.,.,', 'lib/card_query.grammar', 192
  def _reduce_63( val, _values)
 'this card'
  end
.,.,

module_eval <<'.,.,', 'lib/card_query.grammar', 196
  def _reduce_64( val, _values)
 CardQuery::PLV.new(val[1])
  end
.,.,

module_eval <<'.,.,', 'lib/card_query.grammar', 200
  def _reduce_65( val, _values)
 val[0]
  end
.,.,

module_eval <<'.,.,', 'lib/card_query.grammar', 201
  def _reduce_66( val, _values)
 val[0] + ' ' + val[1]
  end
.,.,

module_eval <<'.,.,', 'lib/card_query.grammar', 205
  def _reduce_67( val, _values)
 val[0]
  end
.,.,

module_eval <<'.,.,', 'lib/card_query.grammar', 206
  def _reduce_68( val, _values)
 val[0]
  end
.,.,

module_eval <<'.,.,', 'lib/card_query.grammar', 207
  def _reduce_69( val, _values)
 val[0]
  end
.,.,

module_eval <<'.,.,', 'lib/card_query.grammar', 211
  def _reduce_70( val, _values)
 [val[0]]
  end
.,.,

module_eval <<'.,.,', 'lib/card_query.grammar', 212
  def _reduce_71( val, _values)
 [val[0]] + val[2]
  end
.,.,

module_eval <<'.,.,', 'lib/card_query.grammar', 216
  def _reduce_72( val, _values)
 val[1]
  end
.,.,

module_eval <<'.,.,', 'lib/card_query.grammar', 220
  def _reduce_73( val, _values)
 CardQuery::Condition.comparison_between_column_and_plv(val[0], val[1], val[2])
  end
.,.,

module_eval <<'.,.,', 'lib/card_query.grammar', 221
  def _reduce_74( val, _values)
 CardQuery::Condition.comparison_between_column_and_number(val[0], val[1], val[3])
  end
.,.,

module_eval <<'.,.,', 'lib/card_query.grammar', 222
  def _reduce_75( val, _values)
 CardQuery::Condition.comparison_between_columns(val[0], val[1], CardQuery::Column.new('Number'))
  end
.,.,

module_eval <<'.,.,', 'lib/card_query.grammar', 223
  def _reduce_76( val, _values)
 CardQuery::TodayComparison.new(val[0], val[1])
  end
.,.,

module_eval <<'.,.,', 'lib/card_query.grammar', 224
  def _reduce_77( val, _values)
 CardQuery::Condition.comparison_between_column_and_this_card_property(val[0], val[1], val[2])
  end
.,.,

module_eval <<'.,.,', 'lib/card_query.grammar', 225
  def _reduce_78( val, _values)
 CardQuery::Condition.comparison_between_columns(val[0], val[1], val[2])
  end
.,.,

module_eval <<'.,.,', 'lib/card_query.grammar', 226
  def _reduce_79( val, _values)
 CardQuery::Condition.comparison_between_column_and_value(val[0], val[1], val[2])
  end
.,.,

module_eval <<'.,.,', 'lib/card_query.grammar', 227
  def _reduce_80( val, _values)
 CardQuery::Condition.comparison_between_column_and_this_card(val[0], val[1], @options)
  end
.,.,

module_eval <<'.,.,', 'lib/card_query.grammar', 228
  def _reduce_81( val, _values)
 CardQuery::IsNull.new(val[0])
  end
.,.,

module_eval <<'.,.,', 'lib/card_query.grammar', 229
  def _reduce_82( val, _values)
 CardQuery::Not.new(CardQuery::IsNull.new(val[0]))
  end
.,.,

module_eval <<'.,.,', 'lib/card_query.grammar', 230
  def _reduce_83( val, _values)
 CardQuery::IsCurrentUser.create(val[0])
  end
.,.,

module_eval <<'.,.,', 'lib/card_query.grammar', 231
  def _reduce_84( val, _values)
 CardQuery::Not.new(CardQuery::IsCurrentUser.create(val[0]))
  end
.,.,

module_eval <<'.,.,', 'lib/card_query.grammar', 232
  def _reduce_85( val, _values)
 CardQuery::Condition.explicit_in(val[0], val[2])
  end
.,.,

module_eval <<'.,.,', 'lib/card_query.grammar', 233
  def _reduce_86( val, _values)
 CardQuery::Condition.numbers_explicit_in(val[0], val[3])
  end
.,.,

module_eval <<'.,.,', 'lib/card_query.grammar', 234
  def _reduce_87( val, _values)
 CardQuery::Condition.numbers_explicit_in(val[0], val[3])
  end
.,.,

module_eval <<'.,.,', 'lib/card_query.grammar', 235
  def _reduce_88( val, _values)
 CardQuery::Condition.implicit_in(val[0], val[2])
  end
.,.,

module_eval <<'.,.,', 'lib/card_query.grammar', 236
  def _reduce_89( val, _values)
 CardQuery::Condition.in_plan(val[1])
  end
.,.,

module_eval <<'.,.,', 'lib/card_query.grammar', 237
  def _reduce_90( val, _values)
 CardQuery::TaggedWith.new(val[1])
  end
.,.,

 def _reduce_none( val, _values)
  val[0]
 end

end   # class CardQueryParser
