#  Copyright 2020 ThoughtWorks, Inc.
#  
#  This program is free software: you can redistribute it and/or modify
#  it under the terms of the GNU Affero General Public License as
#  published by the Free Software Foundation, either version 3 of the
#  License, or (at your option) any later version.
#  
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU Affero General Public License for more details.
#  
#  You should have received a copy of the GNU Affero General Public License
#  along with this program.  If not, see <https://www.gnu.org/licenses/agpl-3.0.txt>.

module ContentParser

  # Unlike Hpricot, Nokogiri is relentlessly stubborn about replacing entities with the actual characters
  # as long as they are recognized in the encoding (e.g. UTF-8, US-ASCII, etc).
  #
  # This method will allow us to force specified characters (even whole strings) in text nodes to be escaped
  # as entities in the resulting markup generated by Nokogiri.
  #
  # The reason we do this is to prevent the user from writing inline image attachments and macros. When entering
  # multi-line macros into the description, CKEditor will wrap lines in <p> tags, which will break macro processing.
  # See issue mingle1/#14251 for more details.
  def parse_with_entity_conversion(html, entities_map={})

    frag = Nokogiri::HTML::DocumentFragment.parse(html,"UTF-8")
    return frag if entities_map.keys.empty?

    frag.traverse do |node|
      next unless node.text?

      if (original_text = node.text) =~ /#{entities_map.keys.map {|k| Regexp.escape(k.to_s)}.join("|")}/
        result = [original_text]
        keys = entities_map.keys.select {|k| original_text.include?(k.to_s)}.map(&:to_s)

        keys.each do |key|
          previous = result
          result = []
          previous.each do |item|
            if item.is_a?(String) && item.include?(key)
              parts = item.split(key, -1) # don't omit trailing nulls
              last_index = parts.size - 1
              parts.each_with_index do |part, i|
                result << part unless part == ""
                result << Nokogiri::XML::EntityReference.new(node.document, entities_map[key]) if i < last_index
              end
            else
              result << item # item is a Nokogiri::XML::EntityReference or does not contain matching entity
            end
          end
        end

        result = result.map do |item|
          item.is_a?(String) ? Nokogiri::XML::Text.new(item, node.document) : item
        end

        node.replace(Nokogiri::XML::NodeSet.new(node.document, result)) unless result.empty?
      end
    end

    frag
  end

  module_function :parse_with_entity_conversion

end
