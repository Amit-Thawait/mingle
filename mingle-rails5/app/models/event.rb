#  Copyright 2020 ThoughtWorks, Inc.
#
#  This program is free software: you can redistribute it and/or modify
#  it under the terms of the GNU Affero General Public License as
#  published by the Free Software Foundation, either version 3 of the
#  License, or (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU Affero General Public License for more details.
#
#  You should have received a copy of the GNU Affero General Public License
#  along with this program.  If not, see <https://www.gnu.org/licenses/agpl-3.0.txt>.

class Event < ApplicationRecord
  include SqlHelper
  # mingle_timestamp column is used as our logical ordering column and it generated by column default using database
  # clock when we insert a record. So we should not let AR mess with it
  IGNORED_COLUMNS = %w(mingle_timestamp)

  # has_many :changes, :dependent => :delete_all, :order => :id
  belongs_to :origin, polymorphic: true
  belongs_to :deliverable, foreign_type: :deliverable_type
  belongs_to :created_by, class_name: '::User', foreign_key: :created_by_user_id

  validates_uniqueness_of :origin_id, scope: [:origin_type, :type, :deliverable_id]

  class NonMingleAuthor < Struct.new(:name)
    def id
      nil
    end

    def resource_link(*args)
      nil
    end

    def email
      nil
    end

    def icon_path
      nil
    end
  end

  class << self
    def columns
      super.reject { |c| IGNORED_COLUMNS.include?(c.name) }
    end

    def deliverable_dependency_column
      'deliverable_id'
    end

    def with_program_scope(program_id, created_at, created_by_user_id)
        yield({deliverable_id: program_id, created_at: created_at, created_by_user_id: created_by_user_id, deliverable_type: Deliverable::DELIVERABLE_TYPE_PROGRAM})
    end

    def objective_version(objective_version, options)
      ObjectiveVersionEvent.create!(options.merge(:origin => objective_version))
    end

    def objective_deletion(objective_version, options)
      ObjectiveDeletionEvent.create!(options.merge(:origin => objective_version))
    end

  end

end
